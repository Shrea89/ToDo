{"ast":null,"code":"var _jsxFileName = \"/Users/shreyatalekar/PRojectReact/src/components/WeatherWidget.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Typography, CircularProgress, Paper } from '@mui/material';\nimport { getWeatherInfo } from '../api/weatherApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherWidget = ({\n  city = 'London'\n}) => {\n  _s();\n  const [weather, setWeather] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchWeather = async () => {\n      try {\n        setLoading(true);\n        const data = await getWeatherInfo(city);\n        setWeather(data);\n        setError(null);\n      } catch (err) {\n        setError('Failed to fetch weather information');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchWeather();\n    // Refresh weather every 30 minutes\n    const interval = setInterval(fetchWeather, 30 * 60 * 1000);\n    return () => clearInterval(interval);\n  }, [city]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        p: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        size: 24\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"error\",\n      sx: {\n        p: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  }\n  if (!weather) return null;\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 1,\n    sx: {\n      p: 2,\n      mb: 2,\n      display: 'flex',\n      alignItems: 'center',\n      gap: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: weather.icon,\n      alt: weather.condition,\n      style: {\n        width: 50,\n        height: 50\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: [weather.temperature, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        children: weather.condition\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherWidget, \"TVsks5rssGOnhEQ1DibgKtVD/q4=\");\n_c = WeatherWidget;\nexport default WeatherWidget;\nvar _c;\n$RefreshReg$(_c, \"WeatherWidget\");","map":{"version":3,"names":["React","useState","useEffect","Box","Typography","CircularProgress","Paper","getWeatherInfo","jsxDEV","_jsxDEV","WeatherWidget","city","_s","weather","setWeather","loading","setLoading","error","setError","fetchWeather","data","err","interval","setInterval","clearInterval","sx","display","justifyContent","p","children","size","fileName","_jsxFileName","lineNumber","columnNumber","color","elevation","mb","alignItems","gap","src","icon","alt","condition","style","width","height","variant","temperature","_c","$RefreshReg$"],"sources":["/Users/shreyatalekar/PRojectReact/src/components/WeatherWidget.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Box, Typography, CircularProgress, Paper } from '@mui/material';\nimport { getWeatherInfo } from '../api/weatherApi';\n\nconst WeatherWidget = ({ city = 'London' }) => {\n  const [weather, setWeather] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchWeather = async () => {\n      try {\n        setLoading(true);\n        const data = await getWeatherInfo(city);\n        setWeather(data);\n        setError(null);\n      } catch (err) {\n        setError('Failed to fetch weather information');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchWeather();\n    // Refresh weather every 30 minutes\n    const interval = setInterval(fetchWeather, 30 * 60 * 1000);\n    return () => clearInterval(interval);\n  }, [city]);\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', p: 2 }}>\n        <CircularProgress size={24} />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Typography color=\"error\" sx={{ p: 2 }}>\n        {error}\n      </Typography>\n    );\n  }\n\n  if (!weather) return null;\n\n  return (\n    <Paper elevation={1} sx={{ p: 2, mb: 2, display: 'flex', alignItems: 'center', gap: 2 }}>\n      <img\n        src={weather.icon}\n        alt={weather.condition}\n        style={{ width: 50, height: 50 }}\n      />\n      <Box>\n        <Typography variant=\"h6\">\n          {weather.temperature}Â°C\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {weather.condition}\n        </Typography>\n      </Box>\n    </Paper>\n  );\n};\n\nexport default WeatherWidget; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}